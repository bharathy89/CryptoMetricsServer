# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Query(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, start_time: int = None, end_time: int = None, resolution: str = None
    ):  # noqa: E501
        """Query - a model defined in Swagger

        :param start_time: The start_time of this Query.  # noqa: E501
        :type start_time: int
        :param end_time: The end_time of this Query.  # noqa: E501
        :type end_time: int
        :param resolution: The resolution of this Query.  # noqa: E501
        :type resolution: str
        """
        self.swagger_types = {"start_time": int, "end_time": int, "resolution": str}

        self.attribute_map = {
            "start_time": "start_time",
            "end_time": "end_time",
            "resolution": "resolution",
        }
        self._start_time = start_time
        self._end_time = end_time
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt) -> "Query":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self) -> int:
        """Gets the start_time of this Query.


        :return: The start_time of this Query.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: int):
        """Sets the start_time of this Query.


        :param start_time: The start_time of this Query.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def end_time(self) -> int:
        """Gets the end_time of this Query.


        :return: The end_time of this Query.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: int):
        """Sets the end_time of this Query.


        :param end_time: The end_time of this Query.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def resolution(self) -> str:
        """Gets the resolution of this Query.


        :return: The resolution of this Query.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: str):
        """Sets the resolution of this Query.


        :param resolution: The resolution of this Query.
        :type resolution: str
        """
        allowed_values = ["1h", "1m", "1s"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}".format(
                    resolution, allowed_values
                )
            )

        self._resolution = resolution
