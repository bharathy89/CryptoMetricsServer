# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model, get_db
from swagger_server import util

db = get_db()
table = db["sources_table"]


class Source(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_id: str=None, source_type: str=None, metric_id: str=None, last_scrapped_time: int=None):  # noqa: E501
        """Source - a model defined in Swagger

        :param source_id: The source_id of this Source.  # noqa: E501
        :type source_id: str
        :param source_type: The source_type of this Source.  # noqa: E501
        :type source_type: str
        :param metric_id: The metric_id of this Source.  # noqa: E501
        :type metric_id: str
        :param last_scrapped_time: The last_scrapped_time of this Source.  # noqa: E501
        :type last_scrapped_time: int
        """
        self.swagger_types = {
            'source_id': str,
            'source_type': str,
            'metric_id': str,
            'last_scrapped_time': int
        }

        self.attribute_map = {
            'source_id': 'source_id',
            'source_type': 'source_type',
            'metric_id': 'metric_id',
            'last_scrapped_time': 'last_scrapped_time'
        }
        self._source_id = source_id
        self._source_type = source_type
        self._metric_id = metric_id
        self._last_scrapped_time = last_scrapped_time

    @classmethod
    def from_dict(cls, dikt) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Source of this Source.  # noqa: E501
        :rtype: Source
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_id(self) -> str:
        """Gets the source_id of this Source.


        :return: The source_id of this Source.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: str):
        """Sets the source_id of this Source.


        :param source_id: The source_id of this Source.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_type(self) -> str:
        """Gets the source_type of this Source.


        :return: The source_type of this Source.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: str):
        """Sets the source_type of this Source.


        :param source_type: The source_type of this Source.
        :type source_type: str
        """
        allowed_values = ["cryptowatch"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def metric_id(self) -> str:
        """Gets the metric_id of this Source.


        :return: The metric_id of this Source.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id: str):
        """Sets the metric_id of this Source.


        :param metric_id: The metric_id of this Source.
        :type metric_id: str
        """

        self._metric_id = metric_id

    @property
    def last_scrapped_time(self) -> int:
        """Gets the last_scrapped_time of this Source.


        :return: The last_scrapped_time of this Source.
        :rtype: int
        """
        return self._last_scrapped_time

    @last_scrapped_time.setter
    def last_scrapped_time(self, last_scrapped_time: int):
        """Sets the last_scrapped_time of this Source.


        :param last_scrapped_time: The last_scrapped_time of this Source.
        :type last_scrapped_time: int
        """

        self._last_scrapped_time = last_scrapped_time

    @classmethod
    def list(cls, metric_id="", offset=0, max_number=100) -> list:
        cursor = None
        if metric_id:
            cursor = table.find({"metric_id": metric_id}).skip(offset).limit(max_number)
        else:
            cursor = table.find().skip(offset).limit(max_number)

        items = []
        for item in cursor:
            items.append(Source.from_dict(item))
        return items

    @classmethod
    def load(cls, source_id: str) -> "Source":
        cursor = table.find_one({"source_id": source_id})
        item = {}
        if cursor:
            item = Source.from_dict(cursor)
        return item

    def save(self):
        res = table.update_one({"source_id": self.source_id},
                               {
                                   "$set": self.to_dict(),
                               }, upsert=True)
        return res
