# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.one_of_operation_operand_value1 import (
    OneOfOperationOperandValue1,
)  # noqa: F401,E501
from swagger_server.models.one_of_operation_operand_value2 import (
    OneOfOperationOperandValue2,
)  # noqa: F401,E501
from swagger_server import util


class Operation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        operand_type1: str = None,
        operand_value1: OneOfOperationOperandValue1 = None,
        operator: str = None,
        operand_type2: str = None,
        operand_value2: OneOfOperationOperandValue2 = None,
        function: str = None,
        sample_interval: str = None,
    ):  # noqa: E501
        """Operation - a model defined in Swagger

        :param operand_type1: The operand_type1 of this Operation.  # noqa: E501
        :type operand_type1: str
        :param operand_value1: The operand_value1 of this Operation.  # noqa: E501
        :type operand_value1: OneOfOperationOperandValue1
        :param operator: The operator of this Operation.  # noqa: E501
        :type operator: str
        :param operand_type2: The operand_type2 of this Operation.  # noqa: E501
        :type operand_type2: str
        :param operand_value2: The operand_value2 of this Operation.  # noqa: E501
        :type operand_value2: OneOfOperationOperandValue2
        :param function: The function of this Operation.  # noqa: E501
        :type function: str
        :param sample_interval: The sample_interval of this Operation.  # noqa: E501
        :type sample_interval: str
        """
        self.swagger_types = {
            "operand_type1": str,
            "operand_value1": OneOfOperationOperandValue1,
            "operator": str,
            "operand_type2": str,
            "operand_value2": OneOfOperationOperandValue2,
            "function": str,
            "sample_interval": str,
        }

        self.attribute_map = {
            "operand_type1": "operand_type1",
            "operand_value1": "operand_value1",
            "operator": "operator",
            "operand_type2": "operand_type2",
            "operand_value2": "operand_value2",
            "function": "function",
            "sample_interval": "sample_interval",
        }
        self._operand_type1 = operand_type1
        self._operand_value1 = operand_value1
        self._operator = operator
        self._operand_type2 = operand_type2
        self._operand_value2 = operand_value2
        self._function = function
        self._sample_interval = sample_interval

    @classmethod
    def from_dict(cls, dikt) -> "Operation":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation of this Operation.  # noqa: E501
        :rtype: Operation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operand_type1(self) -> str:
        """Gets the operand_type1 of this Operation.


        :return: The operand_type1 of this Operation.
        :rtype: str
        """
        return self._operand_type1

    @operand_type1.setter
    def operand_type1(self, operand_type1: str):
        """Sets the operand_type1 of this Operation.


        :param operand_type1: The operand_type1 of this Operation.
        :type operand_type1: str
        """
        allowed_values = ["operation", "metric", "constant"]  # noqa: E501
        if operand_type1 not in allowed_values:
            raise ValueError(
                "Invalid value for `operand_type1` ({0}), must be one of {1}".format(
                    operand_type1, allowed_values
                )
            )

        self._operand_type1 = operand_type1

    @property
    def operand_value1(self) -> OneOfOperationOperandValue1:
        """Gets the operand_value1 of this Operation.


        :return: The operand_value1 of this Operation.
        :rtype: OneOfOperationOperandValue1
        """
        return self._operand_value1

    @operand_value1.setter
    def operand_value1(self, operand_value1: OneOfOperationOperandValue1):
        """Sets the operand_value1 of this Operation.


        :param operand_value1: The operand_value1 of this Operation.
        :type operand_value1: OneOfOperationOperandValue1
        """

        self._operand_value1 = operand_value1

    @property
    def operator(self) -> str:
        """Gets the operator of this Operation.


        :return: The operator of this Operation.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this Operation.


        :param operator: The operator of this Operation.
        :type operator: str
        """
        allowed_values = [None, "", "+", "*", "/", "-"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}".format(
                    operator, allowed_values
                )
            )

        self._operator = operator

    @property
    def operand_type2(self) -> str:
        """Gets the operand_type2 of this Operation.


        :return: The operand_type2 of this Operation.
        :rtype: str
        """
        return self._operand_type2

    @operand_type2.setter
    def operand_type2(self, operand_type2: str):
        """Sets the operand_type2 of this Operation.


        :param operand_type2: The operand_type2 of this Operation.
        :type operand_type2: str
        """
        allowed_values = [None, "", "operation", "metric", "constant"]  # noqa: E501
        if operand_type2 not in allowed_values:
            raise ValueError(
                "Invalid value for `operand_type2` ({0}), must be one of {1}".format(
                    operand_type2, allowed_values
                )
            )

        self._operand_type2 = operand_type2

    @property
    def operand_value2(self) -> OneOfOperationOperandValue2:
        """Gets the operand_value2 of this Operation.


        :return: The operand_value2 of this Operation.
        :rtype: OneOfOperationOperandValue2
        """
        return self._operand_value2

    @operand_value2.setter
    def operand_value2(self, operand_value2: OneOfOperationOperandValue2):
        """Sets the operand_value2 of this Operation.


        :param operand_value2: The operand_value2 of this Operation.
        :type operand_value2: OneOfOperationOperandValue2
        """

        self._operand_value2 = operand_value2

    @property
    def function(self) -> str:
        """Gets the function of this Operation.


        :return: The function of this Operation.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function: str):
        """Sets the function of this Operation.


        :param function: The function of this Operation.
        :type function: str
        """
        allowed_values = ["mean", "min", "max"]  # noqa: E501
        if function not in allowed_values:
            raise ValueError(
                "Invalid value for `function` ({0}), must be one of {1}".format(
                    function, allowed_values
                )
            )

        self._function = function

    @property
    def sample_interval(self) -> str:
        """Gets the sample_interval of this Operation.


        :return: The sample_interval of this Operation.
        :rtype: str
        """
        return self._sample_interval

    @sample_interval.setter
    def sample_interval(self, sample_interval: str):
        """Sets the sample_interval of this Operation.


        :param sample_interval: The sample_interval of this Operation.
        :type sample_interval: str
        """
        allowed_values = ["1h", "1m", "1s"]  # noqa: E501
        if sample_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_interval` ({0}), must be one of {1}".format(
                    sample_interval, allowed_values
                )
            )

        self._sample_interval = sample_interval
