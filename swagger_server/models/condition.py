# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.operation import Operation  # noqa: F401,E501
from swagger_server import util


class Condition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        operand_1: Operation = None,
        conditional_operator: str = None,
        operand_2: Operation = None,
    ):  # noqa: E501
        """Condition - a model defined in Swagger

        :param operand_1: The operand_1 of this Condition.  # noqa: E501
        :type operand_1: Operation
        :param conditional_operator: The conditional_operator of this Condition.  # noqa: E501
        :type conditional_operator: str
        :param operand_2: The operand_2 of this Condition.  # noqa: E501
        :type operand_2: Operation
        """
        self.swagger_types = {
            "operand_1": Operation,
            "conditional_operator": str,
            "operand_2": Operation,
        }

        self.attribute_map = {
            "operand_1": "operand_1",
            "conditional_operator": "conditional_operator",
            "operand_2": "operand_2",
        }
        self._operand_1 = operand_1
        self._conditional_operator = conditional_operator
        self._operand_2 = operand_2

    @classmethod
    def from_dict(cls, dikt) -> "Condition":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Condition of this Condition.  # noqa: E501
        :rtype: Condition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operand_1(self) -> Operation:
        """Gets the operand_1 of this Condition.


        :return: The operand_1 of this Condition.
        :rtype: Operation
        """
        return self._operand_1

    @operand_1.setter
    def operand_1(self, operand_1: Operation):
        """Sets the operand_1 of this Condition.


        :param operand_1: The operand_1 of this Condition.
        :type operand_1: Operation
        """

        self._operand_1 = operand_1

    @property
    def conditional_operator(self) -> str:
        """Gets the conditional_operator of this Condition.


        :return: The conditional_operator of this Condition.
        :rtype: str
        """
        return self._conditional_operator

    @conditional_operator.setter
    def conditional_operator(self, conditional_operator: str):
        """Sets the conditional_operator of this Condition.


        :param conditional_operator: The conditional_operator of this Condition.
        :type conditional_operator: str
        """
        allowed_values = [">", "<", "==", ">=", "<="]  # noqa: E501
        if conditional_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `conditional_operator` ({0}), must be one of {1}".format(
                    conditional_operator, allowed_values
                )
            )

        self._conditional_operator = conditional_operator

    @property
    def operand_2(self) -> Operation:
        """Gets the operand_2 of this Condition.


        :return: The operand_2 of this Condition.
        :rtype: Operation
        """
        return self._operand_2

    @operand_2.setter
    def operand_2(self, operand_2: Operation):
        """Sets the operand_2 of this Condition.


        :param operand_2: The operand_2 of this Condition.
        :type operand_2: Operation
        """

        self._operand_2 = operand_2
